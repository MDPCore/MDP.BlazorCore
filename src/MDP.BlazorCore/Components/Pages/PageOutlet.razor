@using System.Text.Json;
@using System.Security.Claims

@namespace MDP.BlazorCore
@implements IDisposable
@code {

    // Constants    
    internal static readonly object PageScriptSectionId = new();


    // Fields
    private DotNetObjectReference<PageOutlet> _interopComponent = null;


    // Properties
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Inject]
    public InteropManager InteropManager { get; set; }

    [Inject]
    public IServiceProvider ServiceProvider { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }


    // Methods
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Require
        if (firstRender == false) return;

        // InteropComponent
        _interopComponent = DotNetObjectReference.Create(this);
        if (_interopComponent == null) throw new InvalidOperationException($"{nameof(_interopComponent)}=null");

        // Initialize
        await this.JSRuntime.InvokeVoidAsync("mdp.blazorCore.interopManager.initialize", _interopComponent);
    }

    public void Dispose()
    {
        // InteropComponent
        _interopComponent?.Dispose();
    }

    [JSInvokable]
    public async Task<InteropResponse> InvokeAsync(string actionName, JsonDocument actionParameters)
    {
        #region Contracts

        ArgumentNullException.ThrowIfNullOrEmpty(actionName);
        ArgumentNullException.ThrowIfNull(actionParameters);

        #endregion
                
        // Execute
        try
        {
            // Principal
            var principal = (await this.AuthenticationStateProvider.GetAuthenticationStateAsync())?.User;
            if (principal == null) throw new InvalidOperationException($"{nameof(principal)}=null");

            // NavigationUri
            var navigationUri = new Uri(this.NavigationManager.Uri);
            if (navigationUri == null) throw new InvalidOperationException($"{nameof(navigationUri)}=null");

            // ControllerUri
            var controllerUri = $"{navigationUri.Scheme}://{navigationUri.Host}{navigationUri.AbsolutePath}";
            if (controllerUri == null) throw new InvalidOperationException($"{nameof(controllerUri)}=null");

            // InvokeAsync
            var interopResponse = await this.InteropManager.InvokeAsync(principal, new InteropRequest
            (
                new Uri(controllerUri),
                actionName,
                actionParameters
            ));
            if (interopResponse == null) throw new InvalidOperationException($"{nameof(interopResponse)}=null");

            // Return
            return interopResponse;
        }
        catch (Exception exception)
        {
            // Require
            while (exception.InnerException != null) exception = exception.InnerException;

            // Return
            return new InteropResponse()
            {
                Succeeded = false,
                ErrorMessage = exception.Message
            };
        }        
    }
}

<SectionOutlet SectionId="@PageScriptSectionId" />
<script>

    // contentLoaded
    document.addEventListener("DOMContentLoaded", function () {

        // pageLoaded
        mdp.blazorCore.pageManager.onPageLoaded();
    }, { once: true });
</script>