@namespace MDP.BlazorCore
@code {

    // Properties
    [Parameter]
    public string LoginPath { get; set; } = null;

    [Parameter]
    public string AccessDeniedPath { get; set; } = null;

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }


    // Methods
    protected override async Task OnInitializedAsync()
    {
        // ReturnUrl
        var returnUrl = string.Empty;
        if (string.IsNullOrEmpty(returnUrl) == true) returnUrl = (new Uri(this.NavigationManager.Uri)).PathAndQuery;
        if (string.IsNullOrEmpty(returnUrl) == true) returnUrl = "/";

        // Redirect
        var principal  = (await this.AuthenticationStateProvider.GetAuthenticationStateAsync())?.User;
        if (principal != null && principal.Identity?.IsAuthenticated == true)
        {
            // AccessDeniedPath
            var accessDeniedPath = this.AccessDeniedPath;
            if (string.IsNullOrEmpty(accessDeniedPath) == true) accessDeniedPath = "/";

            // AccessDenied
            this.NavigationManager.NavigateTo($"{accessDeniedPath}?returnUrl={Uri.EscapeDataString(returnUrl)}", true);
        }
        else
        {
            // LoginPath
            var loginPath = this.LoginPath;
            if (string.IsNullOrEmpty(loginPath) == true) loginPath = "/";

            // Login
            this.NavigationManager.NavigateTo($"{loginPath}?returnUrl={Uri.EscapeDataString(returnUrl)}", true);
        }
    }
}