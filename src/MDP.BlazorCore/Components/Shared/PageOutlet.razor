@using System.Text.Json;
@using System.Security.Claims

@namespace MDP.BlazorCore
@implements IDisposable
@code {

    // Constants    
    internal static readonly object PageDataSectionId = new();

    internal static readonly object PageScriptSectionId = new();


    // Fields
    [Inject]
    public IJSRuntime _jsRuntime { get; set; }

    [Inject]
    public IServiceProvider _serviceProvider { get; set; }

    [Inject]
    public NavigationManager _navigationManager { get; set; }

    [Inject]
    public InteropManager _interopManager { get; set; }

    private DotNetObjectReference<PageOutlet> _interopComponent = null;


    // Constructors        
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Require
        if (firstRender == false) return;

        // InteropComponent
        _interopComponent = DotNetObjectReference.Create(this);
        if (_interopComponent == null) throw new InvalidOperationException($"{nameof(_interopComponent)}=null");

        // Initialize
        await _jsRuntime.InvokeVoidAsync("mdp.blazor.interopManager.initialize", _interopComponent);
    }

    public void Dispose()
    {
        // InteropReference
        _interopComponent?.Dispose();
    }


    // Methods
    [JSInvokable]
    public async Task<object> InvokeAsync(string methodName, JsonDocument methodParameters)
    {
        #region Contracts

        ArgumentNullException.ThrowIfNullOrEmpty(methodName);
        ArgumentNullException.ThrowIfNull(methodParameters);

        #endregion
                
        // Execute
        try
        {
            // NavigationUri
            var navigationUri = new Uri(_navigationManager.Uri);
            if (navigationUri == null) throw new InvalidOperationException($"{nameof(navigationUri)}=null");

            // ServiceUri
            var serviceUri = $"{navigationUri.Scheme}://{navigationUri.Host}{navigationUri.AbsolutePath}";
            if (serviceUri == null) throw new InvalidOperationException($"{nameof(serviceUri)}=null");

            // InvokeAsync
            var interopResponse = await _interopManager?.InvokeAsync(new InteropRequest
            (
                new Uri(serviceUri),
                methodName,
                methodParameters

            ), _serviceProvider);
            if (interopResponse == null) throw new InvalidOperationException($"{nameof(interopResponse)}=null");

            // Return
            return interopResponse;
        }
        catch (Exception exception)
        {
            // Return
            return new InteropResponse()
            {
                Succeeded = false,
                ErrorMessage = exception.Message
            };
        }        
    }
}


<SectionOutlet SectionId="@PageDataSectionId" />
<SectionOutlet SectionId="@PageScriptSectionId" />
<script>

    // blazorPageLoaded
    document.addEventListener("DOMContentLoaded", function () {

        // pageLoaded
        mdp.blazor.eventManager.dispatchPageLoaded();
    }, { once: true });
</script>