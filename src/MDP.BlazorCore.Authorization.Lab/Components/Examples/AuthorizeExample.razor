@using System.Security.Claims

@attribute [Authorize]
@page "/AuthorizeExample"
@code {

    // Fields
    [Inject]
    public AuthenticationStateProvider _authenticationStateProvider { get; set; }


    // Methods
    protected override async Task OnInitializedAsync()
    {
        // Principal
        var principal = (await _authenticationStateProvider.GetAuthenticationStateAsync())?.User;
        if (principal == null) throw new InvalidOperationException($"{nameof(principal)}=null");
        this.Principal = principal;
    }


    // Properties
    public ClaimsPrincipal Principal { get; set; }
}


<!-- title -->
<h3>AuthorizeExample</h3>
<hr />

<!-- identity -->
AuthenticationType=@Principal?.Identity?.AuthenticationType<br />
PrincipalId=@Principal.GetClaimValue(ClaimTypes.NameIdentifier)<br />
PrincipalName=@Principal.GetClaimValue(ClaimTypes.Name)<br />
Mail=@Principal.GetClaimValue(ClaimTypes.Email)<br />
Role=@String.Join(",", Principal.GetAllClaimValue(ClaimTypes.Role))<br />
<br />

<!-- logout -->
<form action="/Account/Logout" method="get">
    <input type="hidden" name="returnUrl" value="/" />
    <input type="submit" value="Logout" /><br />
    <br />
</form>
<hr />